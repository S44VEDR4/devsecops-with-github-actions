AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create EC2 instance and prepare for Pygoat.

Parameters: 
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  SourceIP:
    Description: The IP address range that will be used for access to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64'

Resources: 
  PyGoatSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access
      GroupName: PyGoatSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SourceIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SourceIP
          
  PyGoatIAMPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: IAM policy for managing PyGoat Security Group
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: UpdateIngress
            Effect: Allow
            Action:
              - ec2:RevokeSecurityGroupIngress
              - ec2:AuthorizeSecurityGroupIngress
            Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${PyGoatSecurityGroup.GroupId}'
          - Sid: DescribeGroups
            Effect: Allow
            Action: ec2:DescribeSecurityGroups
            Resource: '*'
  WebServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          pygoat_install:
            - install_cfn
            - install_packages
            - configure_nginx
            - configure_gunicorn
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub | 
                [main]
                stack=${AWS::StackId} 
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub | 
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets pygoat_install --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_packages:
          packages:
            yum: 
              gcc: []
              bind-utils: []
              python3-devel: []
              python3-pip: []
              libpq-devel: []
              git-core: []
              nginx: []
        configure_nginx:
          files:
            /etc/nginx/nginx.conf:
              content: !Sub | 
                user nginx;
                worker_processes auto;
                error_log /var/log/nginx/pygoat.error.log;
                pid /run/nginx.pid;

                events {
                  worker_connections 1024;
                }

                http {
                  access_log /var/log/nginx/pygoat.access.log;

                  server {
                    listen          80;
                    server_name     _;
                    location / {
                        proxy_pass http://localhost:8000;
                        proxy_set_header host $host;
                      }
                  }
                }
              mode: '000600'
              owner: root
              group: root
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - "/etc/nginx/nginx.conf"
        configure_gunicorn:
          files:
            /etc/systemd/system/gunicorn.service:
              content: !Sub | 
                [Unit]
                Description=Gunicorn instance to serve application
                After=network.target

                [Service]
                User=ec2-user
                Group=ec2-user
                WorkingDirectory=/home/ec2-user/pygoat
                Environment="PATH=/home/ec2-user/pygoat/venv/bin"
                ExecStart=/home/ec2-user/pygoat/venv/bin/gunicorn --workers 3 --bind 0.0.0.0:8000 pygoat.wsgi:application
                ExecReload=/bin/kill -s HUP $MAINPID
                KillMode=mixed
                TimeoutStopSec=5
                PrivateTmp=true

                [Install]
                WantedBy=multi-user.target
              mode: '000600'
              owner: root
              group: root
          commands:
            aa-create-pid-and-log-dirs:
              command: mkdir -pv /var/{log,run}/gunicorn/
              cwd: '~'
              ignoreErrors: 'false'
            ab-chmod-pid-and-log-dirs:
              command: chown -cR ec2-user:ec2-user /var/{log,run}/gunicorn/
              cwd: '~'
              ignoreErrors: 'false'
            ac-create-gunicorn-service:
              command: sudo systemctl daemon-reload
              cwd: '~'
              ignoreErrors: 'false'

    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      InstanceType: 't2.micro'
      Monitoring: 'false'
      SecurityGroups:
        - !Ref PyGoatSecurityGroup
      UserData: 
        Fn::Base64: !Sub |
              #!/bin/bash -xe
              yum install -y aws-cfn-bootstrap
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets pygoat_install --region ${AWS::Region}          
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}

Outputs:
  WebsiteURL:
    Description: URL for Pygoat app.
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServer
          - PublicDnsName